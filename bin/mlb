#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'mlb_terminal'
require 'date'
require 'chronic'
require 'colorize'

program :version, MLBTerminal::VERSION
program :description, 'Stream MLB games into the terminal'
global_option '--nocolors'

command :games do |c|
  c.syntax = 'mlb games [options] [date]'
  c.summary = 'Print out a list of scheduled games for the specified date.'
  c.description = 'Print out a tab-seperated value list to STDOUT wih columns ' \
                  'for index, team names, game status, and current score.'
  c.example 'description', 'mlb --date "3 days ago" | grep Nationals'
  c.option '--date STRING', String, 'List games for specified dates (Default: today)'
  c.action do |args, options|
    options.default :date => Time.now.to_date.to_s
    MLBTerminal::Game.list(Chronic.parse(options.date)).each_with_index do |game, index|
      game_info = [
        index,
        "#{game[:away_team][:name]} " \
          "(#{game[:away_team][:wins]}-#{game[:away_team][:losses]}) " \
          "@ #{game[:home_team][:name]} " \
          "(#{game[:home_team][:wins]}-#{game[:home_team][:losses]})",
        "#{game[:starts]} (#{game[:status]})",
        "#{game[:score][:away]}-#{game[:score][:home]}"].join("\t")
      if options.nocolors
        puts game_info
      else
        MLBTerminal::TextDecorator.new(game_info).beautify_game
      end
    end
  end
end

command :pitchers do |c|
  c.syntax = 'mlb pitchers [options] [game-number]'
  c.summary = 'Print out a list of pitchers for the specified date and game index.'
  c.description = 'Print out a tab-seperated value list to STDOUT wih columns ' \
                  'for team, pitcher id, and pitcher name. Note, this prints out ' \
                  'the full line-up on the team.'
  c.example 'description', 'mlb pitchers 11 | grep "Edwin Jackson"'
  c.option '--date STRING', String, 'List pitchers for specified date (Default: today)'
  c.action do |args, options|
    options.default :date => Time.now.to_date.to_s

    # Validate input
    if (Float(args.first) rescue nil).nil?
      puts "Error: Game number must be a valid integer"
      break
    elsif (args.first.to_i < 0)
      puts "Error: Game number must be greater than or equal to 0"
      break
    end

    game_number = args.first.to_i

    gameday_id = MLBTerminal::Game.list(Chronic.parse(options.date))[game_number][:game_id]

    MLBTerminal::Pitcher.list(gameday_id).each_pair do |pitcher_id, pitcher_info|
      puts [
        pitcher_info[:team],
        pitcher_id,
        pitcher_info[:name]].join("\t")
    end
  end
end

command :pitcher do |c|
  c.syntax = 'mlb pitcher [options] [game-number] [pitcher-id]'
  c.summary = 'Print out a list of summary statistics for pitcher tendencies.'
  c.description = 'Print out a tab-seperated value list to STDOUT wih columns ' \
                  'for pitcher name, pitcher team, date, away team, home team, ' \
                  'pitch count, average speed, pitch type, pitch count, average ' \
                  'movement, pfx, velocity, average initial x-position, and ' \
                  'average initial z-position.'
  c.example 'description', 'mlb pitchers --date 2012-09-30 11 | grep "Ross Detwiler" ' \
            '| cut -f 2 | xargs mlb pitcher --date 2012-09-30 11'
  c.option '--date STRING', String, 'List pitchers for specified date (Default: today)'
  c.action do |args, options|
    game_number, pitcher_id = args
    options.default :date => Time.now.to_date.to_s

    # Validate input
    if (Float(game_number) rescue nil).nil?
      puts "Error: Game number must be a valid integer"
      break
    elsif (game_number.to_i < 0)
      puts "Error: Game number must be greater than or equal to 0"
      break
    end

    if (Float(pitcher_id) rescue nil).nil?
      puts "Error: Pitcher ID must be a valid integer"
      break
    elsif (pitcher_id.to_i < 0)
      puts "Error: Pitcher ID must be greater than or equal to 0"
      break
    end

    game_number = game_number.to_i
    games = MLBTerminal::Game.list(Chronic.parse(options.date))
    gameday_id = games[game_number][:game_id]
    pitcher = MLBTerminal::Pitcher.new(gameday_id, pitcher_id)

    pitcher.pitch_tendency_history.each do |game|
      game_info = MLBTerminal::Game.parse_gameday_id(game[:gameday_id])
      puts [
        game[:pitcher_name],
        game[:pitcher_team],
        Date.new(game_info[:year].to_i, game_info[:month].to_i, game_info[:day].to_i),
        MLBTerminal::TEAMS[game_info[:away_team].to_sym],
        MLBTerminal::TEAMS[game_info[:home_team].to_sym],
        game[:pitch_count],
        game[:avg_speed],
        game[:pitch_type],
        game[:pitch_number],
        game[:movement],
        game[:pfx],
        game[:vel],
        game[:avg_x0],
        game[:avg_z0]].join("\t")
    end
  end
end

command :game do |c|
  c.syntax = 'mlb game [options] [game-number]'
  c.summary = 'Print game events'
  c.description = 'Print play-by-play action for the corresponding game. Columns: time, inning, balls/strikes/outs/description. When the --pitches flag is used, columns include: time, inning, inning location, pitcher, batter, pitch type, x (old), y (old), start speed, end speed, top of strike zone, bottom of strike zone, horizontal movement, vertical movement, x-location at plate, y-location at plate, initial horizontal location, initial distance from home plate, initial height position, initial x-velocity, initial y-velocity, initial z-velocity, breaking point, breaking angle, breaking length, pitch type, pitch type confidence, pitch zone, nasty factor, spin direction, spin rate, comments and an unknown field. When --hits is specified, fields include: inning, inning location, pitcher, batter, Hit/Out/Error designation, description of hit, x-location (in pixels based on 250x250 image), y-location (in pixels based on 250x250 image).'
  c.option '--date STRING', String, 'Specify the date for the corresponding game number.'
  c.option '--pitches', 'Print pitch-by-pitch action'
  c.option '--hits', 'Print hit locations'
  c.action do |args, options|
    options.default :date => Time.now.to_date.to_s

    # Input validation.
    date = (Chronic.parse(options.date) rescue Time.now)
    if (Float(args.first) rescue nil).nil?
      puts "Error: Game number must be a valid integer"
      break
    end

    game_number = args.first.to_i
    game_info = MLBTerminal::Game.list(date)[game_number]

    if game_info.nil?
      puts "Error: Game does not exist"
      break
    end

    game = MLBTerminal::Game.new(game_info[:game_id])

    begin
      if options.pitches
        game.pitches.each do |pitch|
          puts [
            pitch[:time].getlocal,
            pitch[:inning],
            pitch[:inning_loc],
            pitch[:pitcher],
            pitch[:batter],
            pitch[:type],
            pitch[:x],
            pitch[:y],
            pitch[:start_speed],
            pitch[:end_speed],
            pitch[:sz_top],
            pitch[:sz_bot],
            pitch[:pfx_x],
            pitch[:pfx_z],
            pitch[:px],
            pitch[:pz],
            pitch[:x0],
            pitch[:y0],
            pitch[:z0],
            pitch[:vx0],
            pitch[:vy0],
            pitch[:vz0],
            pitch[:ax],
            pitch[:ay],
            pitch[:az],
            pitch[:break_y],
            pitch[:break_angle],
            pitch[:break_length],
            pitch[:pitch_type],
            pitch[:type_confidence],
            pitch[:zone],
            pitch[:nasty],
            pitch[:spin_dir],
            pitch[:spin_rate],
            pitch[:cc],
            pitch[:mt]].join("\t")
        end
      elsif options.hits
        game.hits.each do |hit|
          hit_info =  [
            hit[:inning],
            hit[:inning_loc],
            hit[:pitcher],
            hit[:batter],
            hit[:type],
            hit[:desc],
            hit[:x],
            hit[:y]].join("\t")
          if hit[:type].include? "O"
            puts hit_info.colorize(:red)
          elsif hit[:type].include? "H"
            puts hit_info.colorize(:green)
          elsif hit[:type].include? "E"
            puts hit_info.colorize(:yellow)
          else
            puts hit_info
          end
        end
      else
        game.events.each do |event|
          event_info = [
            event[:time].getlocal.to_date.to_s,
            event[:inning],
            event[:inning_loc],
            event[:num],
            "#{event[:balls]}/#{event[:strikes]}/#{event[:outs]}",
            event[:desc]]
          MLBTerminal::TextDecorator.new(event_info).beautify_event
        end
      end
    rescue SystemExit, Interrupt, Errno::EPIPE
      # Do nothing if a user issues ctrl-c.
    end
  end
end
